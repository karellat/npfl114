# -*- coding: utf-8 -*-
#!/usr/bin/env python3
#
# All team solutions *must* list *all* members of the team.
# The members must be listed using their ReCodEx IDs anywhere
# in a comment block in the source file (on a line beginning with #).
#
# You can find out ReCodEx ID in the URL bar after navigating
# to your User profile page. The ID has the following format:
# 310a5c89-3ea1-11e9-b0fd-00505601122b
# 90257956-3ea2-11e9-b0fd-00505601122b
# 69bef76d-1ebb-11e8-9de3-00505601122b
"""speech_recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WFUMU8p4pWR2V23uxDJ_MyiuQAd87I5i
"""

!pip3 install --user tensorflow-gpu==2.0.0a0 gym==0.9.5

from google.colab import drive
drive.mount('/content/gdrive')

class Args:
    def __init__(self, d={}):
        self.prefix = "/content/gdrive/My Drive/Colab Notebooks/speech_recognition/"
        self.logdir = self.prefix + "logs/"
        self.system = self.prefix + "speech_recognition_dev.txt"
        self.gold = self.prefix + "gold.txt"
        self.data = self.prefix + "timit_mfcc.pickle"
        self.batch_size=512
        self.ctc_beam=16
        self.epochs=2
        self.threads=4
        
        for key in d:
            self.__dict__[key] = d[key]

#usr/bin/env python3
import sys

def evaluate(args=Args()):
    def edit_distance(x, y):
        a = [[0] * (len(y) + 1) for _ in range(len(x) + 1)]
        for i in range(len(x) + 1): a[i][0] = i
        for j in range(len(y) + 1): a[0][j] = j
        for i in range(1, len(x) + 1):
            for j in range(1, len(y) + 1):
                a[i][j] = min(
                    a[i][j - 1] + 1,
                    a[i - 1][j] + 1,
                    a[i - 1][j - 1] + (x[i - 1] != y[j - 1])
                )
        return a[-1][-1]

    with open(args.system, "r", encoding="utf-8") as system_file:
        system = [line.rstrip("\n") for line in system_file]

    with open(args.gold, "r", encoding="utf-8") as gold_file:
        gold = [line.rstrip("\n") for line in gold_file]

    if len(system) < len(gold):
        raise RuntimeError("The system output is shorter than gold data: {} vs {}.".format(len(system), len(gold)))

    score = 0
    for i in range(len(gold)):
        gold_sentence = gold[i].split(" ")
        system_sentence = system[i].split(" ")
        score += edit_distance(gold_sentence, system_sentence) / len(gold_sentence)

    print("Average normalized edit distance: {:.2f}%".format(100 * score / len(gold)))

#!/usr/bin/env python3

import tensorflow as tf

def wav_decode(wav):
    audio, sample_rate = tf.audio.decode_wav(wav, desired_channels=1)
    return audio[:, 0].numpy(), sample_rate.numpy()

def mfcc_extract(audio, sample_rate=16000):
    assert sample_rate == 16000, "Only 16k sample rate is supported"

    # A 1024-point STFT with frames of 64 ms and 75% overlap.
    stfts = tf.signal.stft(audio, frame_length=1024, frame_step=256, fft_length=1024)
    spectrograms = tf.math.square(tf.math.abs(stfts))

    # Warp the linear scale spectrograms into the mel-scale.
    num_spectrogram_bins, lower_edge_hertz, upper_edge_hertz, num_mel_bins = 513, 80.0, 7600.0, 80
    linear_to_mel_weight_matrix = tf.signal.linear_to_mel_weight_matrix(
          num_mel_bins, num_spectrogram_bins, sample_rate, lower_edge_hertz, upper_edge_hertz)
    mel_spectrograms = tf.linalg.matmul(spectrograms, linear_to_mel_weight_matrix)

    # Compute a stabilized log to get log-magnitude mel-scale spectrograms.
    log_mel_spectrograms = tf.math.log(mel_spectrograms + 1e-6)

    # Compute MFCCs from log_mel_spectrograms and take the first 13.
    mfccs = tf.signal.mfccs_from_log_mel_spectrograms(log_mel_spectrograms)[:, :13]

    # Create deltas for MFCCs.
    mfccs = tf.concat([mfccs[:1], mfccs, mfccs[-1:]], axis=0)
    mfccs = tf.concat([mfccs[1:-1], mfccs[2:] - mfccs[:-2]], axis=1)

    return mfccs.numpy()

import os
import sys
import pickle

import numpy as np

class TimitMFCC:
    LETTERS = [
        "<pad>", "_", "'", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
        "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
    ]

    MFCC_DIM = 26

    class Dataset:
        def __init__(self, data, shuffle_batches, seed=42):
            self._data = {}
            self._data["mfcc"] = data["mfcc"]
            self._data["letters"] = [letters + 1 for letters in data["letters"]]
            self._size = len(self._data["mfcc"])

            self._shuffler = np.random.RandomState(seed) if shuffle_batches else None

        @property
        def data(self):
            return self._data

        @property
        def size(self):
            return self._size

        def batches(self, size=None):
            permutation = self._shuffler.permutation(self._size) if self._shuffler else np.arange(self._size)
            while len(permutation):
                batch_size = min(size or np.inf, len(permutation))
                batch_perm = permutation[:batch_size]
                permutation = permutation[batch_size:]

                batch = {}
                for key, values in self._data.items():
                    max_length = max(len(values[i]) for i in batch_perm)
                    batch[key] = np.zeros([batch_size, max_length, *values[batch_perm[0]].shape[1:]], values[batch_perm[0]].dtype)
                    batch[key + "_len"] = np.zeros([batch_size], dtype=np.int32)

                    for i, index in enumerate(batch_perm):
                        batch[key][i][:len(values[index])] = values[index]
                        batch[key + "_len"][i] = len(values[index])
                yield batch

    def __init__(self, path="timit_mfcc.pickle"):
        if not os.path.exists(path):
            print("The Timit dataset is not public, you need to manually download\n" +
                  "timit_mfcc.pickle file from ReCodEx.", file=sys.stderr)
            sys.exit(1)

        with open(path, "rb") as timit_mfcc_file:
            data = pickle.load(timit_mfcc_file)

        for dataset in ["train", "dev", "test"]:
            setattr(self, dataset, self.Dataset(data[dataset], shuffle_batches=dataset == "train"))

#!/usr/bin/env python3
import contextlib

import numpy as np
import tensorflow as tf
import time

class Network:
    def __init__(self, args):
        self._beam_width = args.ctc_beam

        # TODO: Define a suitable model, given already masked `mfcc` with shape
        # `[None, TimitMFCC.MFCC_DIM]`. The last layer should be a Dense layer
        # without an activation and with `len(TimitMFCC.LETTERS) + 1` outputs,
        # where the `+ 1` is for the CTC blank symbol.
        #
        # Store the results in `self.model`.
        #self.model = tf.keras.models.Sequential()
        input_layer = tf.keras.layers.Input([None, TimitMFCC.MFCC_DIM])
        rnn = tf.keras.layers.Bidirectional(
            tf.keras.layers.LSTM( # Uses CuDNNLSTM for better GPU performance
                256,
                return_sequences=True,
                activation='tanh',
                recurrent_activation='sigmoid',
                recurrent_dropout=0,
                unroll=False,
                use_bias=True
            )
        )(input_layer)
        rnn2 = tf.keras.layers.Bidirectional(
            tf.keras.layers.LSTM( # Uses CuDNNLSTM for better GPU performance
                256,
                return_sequences=True,
                activation='tanh',
                recurrent_activation='sigmoid',
                recurrent_dropout=0,
                unroll=False,
                use_bias=True
            )
        )(rnn)
        output = tf.keras.layers.Dense(len(TimitMFCC.LETTERS) + 1)(rnn2)
        
        self.model = tf.keras.Model(inputs=[input_layer], outputs=[output])
        print(self.model.summary())

        # The following are just defaults, do not hesitate to modify them.
        self._optimizer = tf.optimizers.Adam()
        self._loss = tf.losses.SparseCategoricalCrossentropy()
        self._metrics = {"loss": tf.metrics.Mean(), "edit_distance": tf.metrics.Mean()}
        self._writer = tf.summary.create_file_writer(args.logdir, flush_millis=10 * 1000)

    # Converts given tensor with `0` values for padding elements, create
    # a SparseTensor.
    def _to_sparse(self, tensor):
        tensor_indices = tf.where(tf.not_equal(tensor, 0))
        return tf.sparse.SparseTensor(tensor_indices, tf.gather_nd(tensor, tensor_indices), tf.shape(tensor, tf.int64))

    # Convert given sparse tensor to a (dense_output, sequence_lengths).
    def _to_dense(self, tensor):
        tensor = tf.sparse.to_dense(tensor, default_value=-1)
        tensor_lens = tf.reduce_sum(tf.cast(tf.not_equal(tensor, -1), tf.int32), axis=1)
        return tensor, tensor_lens

    # Compute logits given input mfcc, mfcc_lens and training flags.
    # Also transpose the logits to `[time_steps, batch, dimension]` shape
    # which is required by the following CTC operations.
    def _compute_logits(self, mfcc, mfcc_lens, training):
        logits = self.model(mfcc, mask=tf.sequence_mask(mfcc_lens),training=training)
        return tf.transpose(logits, [1, 0, 2])

    # Compute CTC loss using given logits, their lengths, and sparse targets.
    def _ctc_loss(self, logits, logits_len, sparse_targets):
        loss = tf.nn.ctc_loss(sparse_targets, logits, None, logits_len, blank_index=len(TimitMFCC.LETTERS))
        self._metrics["loss"](loss)
        return tf.reduce_mean(loss)

    # Perform CTC predictions given logits and their lengths.
    def _ctc_predict(self, logits, logits_len):
        (predictions,), _ = tf.nn.ctc_beam_search_decoder(logits, logits_len, beam_width=self._beam_width)
        return tf.cast(predictions, tf.int32)

    # Compute edit distance given sparse predictions and sparse targets.
    def _edit_distance(self, sparse_predictions, sparse_targets):
        edit_distance = tf.edit_distance(sparse_predictions, sparse_targets, normalize=True)
        self._metrics["edit_distance"](edit_distance)
        return edit_distance

    @tf.function(input_signature=[tf.TensorSpec(shape=[None, None, TimitMFCC.MFCC_DIM], dtype=tf.float32),
                                  tf.TensorSpec(shape=[None], dtype=tf.int32),
                                  tf.TensorSpec(shape=[None, None], dtype=tf.int32)])
    def train_batch(self, mfcc, mfcc_lens, targets):
        # TODO: Implement batch training.
        # Convert target letters into sparse representation
        sparse_targets = self._to_sparse(targets)
        
        with tf.GradientTape() as tape:
            logits = self._compute_logits(mfcc, mfcc_lens, True)
            loss = self._ctc_loss(logits, mfcc_lens, sparse_targets)
        
        gradient = tape.gradient(loss, self.model.trainable_variables)
        gradient_norm = tf.linalg.global_norm(gradient)
        self._optimizer.apply_gradients(zip(gradient, self.model.trainable_variables))
        
        predictions = self._ctc_predict(logits, mfcc_lens)
        ed = self._edit_distance(predictions, sparse_targets)
        
        # if required, perform decoding by a CTC decoder (`tf.nn.ctc_beam_search_decoder`) and possibly evaluate results using normalized edit distance (`tf.edit_distance`).
        tf.summary.experimental.set_step(self._optimizer.iterations)
        with self._writer.as_default():
            for name, metric in self._metrics.items():
                metric.reset_states()
                if name == 'loss':
                    metric(loss)
                elif name == 'edit_distance':
                    metric(ed)
                else:
                    raise Exception('Unknown metric')

                tf.summary.scalar("train/"+name, metric.result())
            tf.summary.scalar("train/gradient_norm", gradient_norm)

    def train_epoch(self, dataset, args):
        # TODO: Store suitable metrics in TensorBoard
        i = 1
        total = dataset.size // args.batch_size+1
        time1 = 'unknown'
        t = None
        for batch in dataset.batches(args.batch_size):
            print('Batch {}/{}; Time per batch: {}'.format(i, total, time1), end='', flush=True)
            start = time.time()
            self.train_batch(batch["mfcc"], batch["mfcc_len"], batch["letters"])
            if t == None:
                t = time.time() - start
            else:
                t = (t*(i-1) + time.time() - start)/i
            time1 = str(datetime.timedelta(seconds=int(t)))
            print('\r', end='')
            i += 1
            
        print('', flush=True)

    @tf.function(input_signature=[tf.TensorSpec(shape=[None, None, TimitMFCC.MFCC_DIM], dtype=tf.float32),
                                  tf.TensorSpec(shape=[None], dtype=tf.int32),
                                  tf.TensorSpec(shape=[None, None], dtype=tf.int32)])
    def evaluate_batch(self, mfcc, mfcc_lens, targets):
        sparse_targets = self._to_sparse(targets)
        logits = self._compute_logits(mfcc, mfcc_lens, False)
        loss = self._ctc_loss(logits, mfcc_lens, sparse_targets)
        predictions = self._ctc_predict(logits, mfcc_lens)
        ed = self._edit_distance(predictions, sparse_targets)
        
        for name, metric in self._metrics.items():
            if name == 'loss':
                metric(loss)
            elif name == 'edit_distance':
                metric(ed)
            else:
                raise Exception('Unknown metric')
        
    def evaluate(self, dataset, dataset_name, args):
        for _, metric in self._metrics.items():
            metric.reset_states()
            
        for batch in dataset.batches(args.batch_size):
            self.evaluate_batch(batch["mfcc"], batch["mfcc_len"], batch["letters"])
        
        M = {}
        with self._writer.as_default():
            for name, metric in self._metrics.items():
                M[name] = metric.result().numpy()
                tf.summary.scalar('{}/{}'.format(dataset_name, name), M[name])
        
        return M

    @tf.function(input_signature=[tf.TensorSpec(shape=[None, None, TimitMFCC.MFCC_DIM], dtype=tf.float32),
                                  tf.TensorSpec(shape=[None], dtype=tf.int32)])
    def predict_batch(self, mfcc, mfcc_lens):
        # TODO: Implement batch prediction, returning a tuple (dense_predictions, prediction_lens)
        # produced by self._to_dense.
        
        logits = self._compute_logits(mfcc, mfcc_lens, False)
        predictions = self._ctc_predict(logits, mfcc_lens)
        dense = self._to_dense(predictions)
        
        return dense

    def predict(self, dataset, args):
        sentences = []
        for batch in dataset.batches(args.batch_size):
            for prediction, prediction_len in zip(*self.predict_batch(batch["mfcc"], batch["mfcc_len"])):
                sentences.append(prediction[:prediction_len])
        return sentences


if __name__ == "__main__":
    import argparse
    import datetime
    import os
    import re

    # Parse arguments
    args = Args()

    # Fix random seeds and number of threads
    np.random.seed(42)
    tf.random.set_seed(42)

    # Create logdir name
    excluded = ['gold', 'system', 'logdir', 'threads', 'prefix', 'data']
    args.logdir = os.path.join(args.logdir, "{}-{}".format(
        datetime.datetime.now().strftime("%Y-%m-%d_%H%M%S"),
        ",".join(
            ("{}={}".format(
                re.sub("(.)[^_]*_?", r"\1", key), value
            ) for key, value in sorted(vars(args).items()) 
              if key not in excluded)
        )
    ))
    args.system = args.logdir + "/speech_recognition_dev.txt"
    args.epochs = 90
    args.batch_size = 128

    # Load the data
    timit = TimitMFCC(path=args.data)

    # Create the network and train
    network = Network(args)
    for epoch in range(args.epochs):
        print('Epoch {}/{}'.format(epoch+1, args.epochs), flush=True)
        start = time.time()
        network.train_epoch(timit.train, args)
        metrics = network.evaluate(timit.dev, "dev", args)
        print(metrics)
        print('Elapsed time: {}'.format(str(datetime.timedelta(seconds=time.time() - start))), flush=True)
        out_path = "speech_recognition_test_{}.txt".format(epoch+1)
        if os.path.isdir(args.logdir): out_path = os.path.join(args.logdir, out_path)
        with open(out_path, "w", encoding="utf-8") as out_file:
            for sentence in network.predict(timit.test, args):
                print(" ".join(timit.LETTERS[letters] for letters in sentence), file=out_file)

    # Generate test set annotations, but to allow parallel execution, create it
    # in in args.logdir if it exists.
    #out_path = "speech_recognition_test.txt"
    #if os.path.isdir(args.logdir): out_path = os.path.join(args.logdir, out_path)
    #with open(out_path, "w", encoding="utf-8") as out_file:
    #    for sentence in network.predict(timit.test, args):
    #        print(" ".join(timit.LETTERS[letters] for letters in sentence), file=out_file)
            
    with open(args.gold, "w", encoding="utf-8") as out_file:
        for sentence in timit.dev.data['letters']:
            print(" ".join(timit.LETTERS[letters] for letters in sentence), file=out_file)
    
    with open(args.system, "w", encoding="utf-8") as out_file:
        for sentence in network.predict(timit.dev, args):
            print(" ".join(timit.LETTERS[letters] for letters in sentence), file=out_file)

args = Args()

# Load the data
timit = TimitMFCC(path=args.data)

print(timit.train.data['mfcc'][2].shape)
print(timit.train.data['letters'][2].shape)

#print([timit.LETTERS[letter] for letter in (timit.train.data['mfcc'][1])])
print([timit.LETTERS[letter] for letter in (timit.train.data['letters'][1])])

evaluate(args)

# 'perm' is more useful for n-dimensional tensors, for n > 2
x = tf.constant(
    [
        [
            [ 1,  2],
            [ 4,  5]
        ],
        [
            [ 7,  8],
            [10, 11]
        ]
    ]
)

# Take the transpose of the matrices in dimension-0
# (this common operation has a shorthand `linalg.transpose`)
tf.transpose(x, perm=[1, 0, 2])  # [[[1,  4],
                                 #   [2,  5],
                                 #   [3,  6]],
                                 #  [[7, 10],
                                 #   [8, 11],
                                 #   [9, 12]]]

!ls

args.logdir

args.system

